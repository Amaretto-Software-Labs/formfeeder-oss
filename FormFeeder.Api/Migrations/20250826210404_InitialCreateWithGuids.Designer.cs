// <auto-generated />
using System;
using FormFeeder.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FormFeeder.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250826210404_InitialCreateWithGuids")]
    partial class InitialCreateWithGuids
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FormFeeder.Api.Models.Entities.AllowedDomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("FormConfigurationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Domain");

                    b.HasIndex("FormConfigurationId", "Domain")
                        .IsUnique();

                    b.ToTable("AllowedDomains");
                });

            modelBuilder.Entity("FormFeeder.Api.Models.Entities.ConnectorConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FormConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SettingsJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Enabled");

                    b.HasIndex("Type");

                    b.HasIndex("FormConfigurationId", "Name")
                        .IsUnique();

                    b.ToTable("ConnectorConfigurations");
                });

            modelBuilder.Entity("FormFeeder.Api.Models.Entities.FormConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("FormId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("PrivacyMode")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("FormId")
                        .IsUnique();

                    b.ToTable("FormConfigurations");
                });

            modelBuilder.Entity("FormFeeder.Api.Models.Entities.RateLimitSettingsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FormConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<int>("RequestsPerWindow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<int>("WindowMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("FormConfigurationId")
                        .IsUnique();

                    b.ToTable("RateLimitSettings");
                });

            modelBuilder.Entity("FormFeeder.Api.Models.FormSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientIp")
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<string>("FormData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("FormId")
                        .HasColumnType("text");

                    b.Property<string>("Referer")
                        .HasColumnType("text");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("SubmittedAt");

                    b.HasIndex("FormId", "SubmittedAt");

                    b.ToTable("FormSubmissions");
                });

            modelBuilder.Entity("FormFeeder.Api.Models.Entities.AllowedDomainEntity", b =>
                {
                    b.HasOne("FormFeeder.Api.Models.Entities.FormConfigurationEntity", "FormConfiguration")
                        .WithMany("AllowedDomains")
                        .HasForeignKey("FormConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormConfiguration");
                });

            modelBuilder.Entity("FormFeeder.Api.Models.Entities.ConnectorConfigurationEntity", b =>
                {
                    b.HasOne("FormFeeder.Api.Models.Entities.FormConfigurationEntity", "FormConfiguration")
                        .WithMany("Connectors")
                        .HasForeignKey("FormConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormConfiguration");
                });

            modelBuilder.Entity("FormFeeder.Api.Models.Entities.RateLimitSettingsEntity", b =>
                {
                    b.HasOne("FormFeeder.Api.Models.Entities.FormConfigurationEntity", "FormConfiguration")
                        .WithOne("RateLimit")
                        .HasForeignKey("FormFeeder.Api.Models.Entities.RateLimitSettingsEntity", "FormConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormConfiguration");
                });

            modelBuilder.Entity("FormFeeder.Api.Models.Entities.FormConfigurationEntity", b =>
                {
                    b.Navigation("AllowedDomains");

                    b.Navigation("Connectors");

                    b.Navigation("RateLimit");
                });
#pragma warning restore 612, 618
        }
    }
}
